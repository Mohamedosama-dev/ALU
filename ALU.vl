module half_adder(output sum, output carry, input a, input b);
   xor(sum, a, b);
   and(carry, a, b);
endmodule

module full_adder(output sum, output carry, input x, input y, input z);
   wire s1, c1, c2;
   half_adder h1(s1, c1, x, y);
   half_adder h2(sum, c2, s1, z);
   or(carry, c1, c2);
endmodule

module mux(output choose, input a, input b, input c, input d, input s0, input s1);
	wire not_s0, not_s1, first, second, third, forth;
   
	not(not_s0, s0);
	not(not_s1, s1);
	and(first, not_s0,not_s1,a);
	and(second, s0,not_s1,b);
	and(third, not_s0,s1,c);
	and(forth, s0,s1,d);
   
	or(choose, first,second,third,forth);
endmodule

module arithmetic_circuit(output [3:0] D, output cout, input [3:0] A,input [3:0] B,input cin,input s0,input s1);
	wire [3:0] M;wire [3:0] no; wire [3:0] C;
	wire x0=0;
	wire x1= 1;
	not(no[0], B[0]);not(no[1], B[1]);not(no[2], B[2]);not(no[3], B[3]);
	mux m0(M[0], B[0],no[0],x0,x1,s0,s1);
	mux m1(M[1], B[1],no[1],x0,x1,s0,s1);
	mux m2(M[2], B[2],no[2],x0,x1,s0,s1);
	mux m3(M[3], B[3],no[3],x0,x1,s0,s1);
	full_adder f0(D[0],C[1],A[0],M[0],cin);
	full_adder f1(D[1],C[2],A[1],M[1],C[1]);
	full_adder f2(D[2],C[3],A[2],M[2],C[2]);
	full_adder f3(D[3],cout,A[3],M[3],C[3]);
endmodule

module logic_circuit(output [3:0] E,output carry ,input [3:0] A,input [3:0] B,input s0,input s1);
	wire [3:0] AandB;wire [3:0] AorB;wire [3:0] AxorB;wire [3:0] notA; wire carry=0;
	and(AandB[0], A[0],B[0]);and(AandB[1], A[1],B[1]);and(AandB[2], A[2],B[2]);and(AandB[3], A[3],B[3]);
	or(AorB[0], A[0],B[0]);or(AorB[1], A1,B[1]);or(AorB[2], A[2],B[2]);or(AorB[3], A[3],B[3]);
	xor(AxorB[0], A[0],B[0]);xor(AxorB[1], A[1],B[1]);xor(AxorB[2], A[2],B[2]);xor(AxorB[3], A[3],B[3]);
	not(notA[0], A[0]);not(notA[1], A[1]);not(notA[2], A[2]);not(notA[3], A[3]);
	mux m0(E[0], AandB[0],AorB[0],AxorB[0],notA[0],s0,s1);
	mux m1(E[1], AandB[1],AorB[1],AxorB[1],notA[1],s0,s1);
	mux m2(E[2], AandB[2],AorB[2],AxorB[2],notA[2],s0,s1);
	mux m3(E[3], AandB[3],AorB[3],AxorB[3],notA[3],s0,s1);
endmodule


module ALU_circuit(output [3:0] Out, output cout, input [3:0] A, input [3:0] B, input cin, input s0, input s1, input s2, input s3);
	wire [3:0] D; wire [3:0] E;
	
	arithmetic_circuit ac (D, cout, A, B, cin, s0, s1);
	logic_circuit lc (E, cout, A, B, s0, s1);

	wire x0=0;

	mux mo(Out[0],D[0], E[0], x0, A[1], s2, s3);
	mux m1(Out[1],D[1], E[1], A[0], A[2], s2, s3);
	mux m2(Out[2],D[2], E[2], A[1], A[3], s2, s3);
	mux m3(Out[3],D[3], E[3], A[2], A[3], s2, s3);	
	
	
endmodule
//change selection and input to get different results.
module Test_ALU();
	
	wire a3=0;wire a2=1;wire a1=0;wire a0=0;
	wire b3=1;wire b2=0;wire b1=1;wire b0=0;
	wire [3:0] a; wire [3:0] b;
	assign a = {a3,a2,a1,a0};
	assign b = {b3,b2,b1,b0};
	wire s3 = 0; wire s2 = 0; wire s1 = 0; wire s0 = 0;
	wire c = 0;	wire [3:0] out;		wire cout;

	ALU_circuit alu_test (out, cout, a, b, c, s0, s1, s2, s3);// add (a+b).
	
	wire x3=1;wire x2=1;wire x1=0;wire x0=0;
	wire y3=1;wire y2=0;wire y1=1;wire y0=0;
	wire [3:0] x; wire [3:0] y;
	assign x = {x3,x2,x1,x0};
	assign y = {y3,y2,y1,y0};
	wire S3 = 0; wire S2 = 1; wire S1 = 0; wire S0 = 0;

	wire C = 0;	wire [3:0] Out;		wire Cout;

	ALU_circuit alu_test2 (Out, Cout, x, y, c, S0, S1, S2, S3);// shift right a.
	
		
	initial
	begin
		$monitor(" A=%b%b%b%b, B=%b%b%b%b, Selecion=%b%b%b%b, Cin=%b, Out=(%b)%b%b%b%b", a[3], a[2], a[1], a[0], b[3], b[2], b[1], b[0], s3, s2, s1, s0, c, cout, out[3], out[2], out[1], out[0],
			"\n X=%b%b%b%b, Y=%b%b%b%b, Selecion=%b%b%b%b, Cin=%b, Out=(%b)%b%b%b%b", x[3], x[2], x[1], x[0], y[3], y[2], y[1], y[0], S3, S2, S1, S0, C, Cout, Out[3], Out[2], Out[1], Out[0]);

	end
	
	
endmodule